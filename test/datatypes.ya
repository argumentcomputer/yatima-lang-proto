package datatypes where

def Nat : * 
  = ∀.self
  (0 P : ∀ Nat -> *)
  (& zero : (P (λ P z s => z)))
  (& succ : ∀ (pred : Nat) -> (P (λ P z s => s pred)))
  -> P self

def zero : Nat = λ P z s => z
def succ (n : Nat) : Nat = λ P z s => s n

def Ref (A : *) : *
  = ∀.self
  (0 P : ∀ (x : Ref A) -> *)
  (& box : ∀ (val : A) -> (P (λ P t => t val)))
  -> P self

def box (0 A : *) (val : A) : (Ref A) = λ P t => t val

def update (0 A : *) (1 x : (Ref A)) (f : ∀ A -> A) : (Ref A) =
  (x (λ x => Ref A) (λ val => (box A (f val))))
