package Nat where

def Nat : * =
  ∀.self
    (0 P : ∀ Nat -> *)
    (& zero : (P (\ P z s => z)))
    (& succ : ∀ (pred : Nat) -> (P (\ P z s => s pred)))
    -> P self

def zero : Nat
  = \ P z s => z

def succ (x : Nat) : Nat
  = \ P z s => s x

def pred (x: Nat) : Nat
  = x (\ _ => Nat)
   zero
   (\ p => p)
